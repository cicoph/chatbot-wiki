datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
}

model Conversation {
  id            Int     @id @default(autoincrement())
  name          String
  messages      String?
  modelId       String?
  published     Boolean @default(false)
  user          User?   @relation(fields: [userId], references: [id])
  userId        String?
  prompt        String
  temperature   Int
  fodlerId      String?
}

model Folder {
  id          String    @id @default(cuid())
  name        String
  type        String
  userId      String
  user        User @relation(fields: [userId], references: [id])
}

model Prompt {
    id            String    @id @default(cuid())
    name          String
    description   String
    content       String
    modelId       String
    user          User @relation(fields: [userId], references: [id])
    userId        String
    folderId      String?
}

model OpenAIModel {
  id            String    @id @default(cuid())
  name          String
  maxLength     Int
  tokenLimit    Int
}

model Message {
  id              String    @id @default(cuid())
  role            String
  content         String
  userId          String
  user            User @relation(fields: [userId], references: [id])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  conversations Conversation[]
  messages      Message[]
  folders       Folder[]
  prompts       Prompt[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}