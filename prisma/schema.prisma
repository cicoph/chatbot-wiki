datasource db {
    provider            = "mongodb"
    url                 = env("DATABASE_URL")
}

generator client {
    provider            = "prisma-client-js"
}

model User {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    name                String?
    email               String?   @unique
    stripe_customer     String?
    emailVerified       DateTime?
    password            String?
    image               String?
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    accounts            Account[]
    sessions            Session[]
    conversation        Conversation?
}

model Conversation {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    version             Int
    history             History[]
    folders             Folder[]
    prompts             Prompt[]
    author              User      @relation(fields: [authorId], references: [id])
    authorId            String    @db.ObjectId

    @@unique([authorId])
}


type History {
    id                  String
    name                String
    messages            Message[]
    model               Model
    prompt              String
    temperature         Float
    folderId            String?
}

type Model {
    id                  String
    name                String
    maxLength           Int
    tokenLimit          Int
}

type Folder {
    id                  String
    name                String
    type                String
}

type Prompt {
    id                  String
    name                String
    description         String
    content             String
    model               Model
    folderId            String?
}

type Message {
    role                String
    content             String
}

model Account {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    userId              String    @db.ObjectId
    providerType        String
    providerId          String
    providerAccountId   String
    refreshToken        String?
    accessToken         String?
    accessTokenExpires  DateTime?
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
    user                User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id                  String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken        String   @unique
    userId              String   @db.ObjectId
    expires             DateTime
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken         String   @unique
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
}

model VerificationToken {
    id                  String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier          String
    token               String   @unique
    expires             DateTime

    @@unique([identifier, token])
}